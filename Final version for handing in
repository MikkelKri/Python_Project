#!/usr/bin/env python3

#PSEUDOCODE FOR STEP 1

#Open gene 2 pubmed
#open geneinfo
#Have the user open the program and input a tax id
	#save this tax ID as a variable
	#check for error

#filter gene_info data for that tax id
	#If the line starts with the tax id variable, strip/split the line
	#Save this filtered info into a temporary list (potential for optimization, reading directly to dict)
	#If the length of this list is zero, return an error stating that the tax ID wasn't found
	
#Convert the list into a dict, with pubmedID as the key and all the genes linked to that ID as values
	#Reduce the size of this dict by deleting all key/value pairs with only one value
	
#The central algorithm then iterates through each key/value pair and creates all unique combinations of values
	#for each value in each key/value dict group return a tuple where the first item is the "i'th" item in the 
	#value set and the second item is the "i+1'th" item in the value set. By iterating 
	#through the whole value set in this ordered fashion we will create all combinations of unique 
	#gene/gene pairs linked to each article - this is saved as a list of tuples. We eventually 
	#flatten the structure into a single list of tuples. 
	
#We will convert this flat list of tuples into a dict that summarizes, for each tuple pair, 
	#how many times it occurs. This structure is useful for quickly seeing which gene pairs are 
	#linked most often. We will use this structure to return the gene that is linked ("mentioned") 
	#most often with other genes.  Additionally, we can return the 5 largest networks associated with this gene
	#{(GeneA,GeneB): count of occurrences}

#We can also now create our desired dict of dict structure
	#Gene1 : {Gene2: count of Gene1/Gene2 article links, GeneN: count of Gene1/GeneN article linksâ€¦}}
	#We can sort and filter the dict of dict to show the top 5 genes with the most number of 
	#gene links, i.e. the largest networks


#PSEUDOCODE FOR STEP 2
#We want for further use converting all the GeneID's to GeneNames. We are using the file gene_info for that
	#If the line starts with the typed in tax_id, the whole line will be sat into a list.
	#We then have a large list we can loop through. We make a empty dict and looking if GeneID is in the dict
	#If not the GeneID is already in the dict, it will be placed there as key with the corresponding GeneName as value

#For further filtration and what exactly should be in the output file. We want some usedInputs to decide
#Option 1: Top 5 genes with the most number of gene links
	#Further options is been made avaible here.
	#Option 1.1: To choose to see all 5 genes including their individually network
		#With a for loop we get three lists. One with GeneID, one with ConnedGenes and one with confidence score
		#With three lists we want the output files. We want to make a for loop in a for loop.
		#To first write the first gene with all its related genes. Then second gene with all related genes and etc.
		#To be able to track the genes respectively related genes. We make a variable which has the length of the related genes for the speciic gene
		#So everytime our first loop has run our second loop in that loop shifts with the length of the previous related genes.
	#Option 1.2: To choose and show between the top 5 largest genes 1 to 5
		#Take the network in the list that the user have typed in
		#We want to have a list with connected genes, another one with confidence score and a string with the top gene
		#We want to make a for loop where the top gene is the same and then looping throught the two list with related genes and score
#Option 2: Show gene with highest score/most linked
	#Further options is been made avaible here
	#Option 2.1: Choose to show all networks, sorted after where the top gene has highest score.
		#The method should follow as option 1.1. Has three list: GeneID, ConnectedGenes and Confidence score
		#A for loop in a for loop and follow the method and thought as in option 1.1
	#Option 2.2: Choose to only show all related genes for the top gene
		#Follow the same thoughts as option 2.1 to loop through the three lists
		#Instead of before where writing in the output file for all related network for top gene.
		#Including other related genes for that network. Now we thought only to write in output file
		#For the related genes for the top gene and therefore not other relation between different genes.
		#So only if the gene as key is top gene in dict will we write all that networks related gene 
		#Or if the top gene is the value we will only write the related gene for top gene/key in dict for that network
#####################################################################################################################
	


#######################################################################################################################


import sys

#See the TaxID
try:
	tax = str(sys.argv[1])
	print("The taxonomy id you have entered is: ", tax)
	response = input("Is that correct? Please enter y or n: ")
	if response.upper() == "Y":
		print("Please be patient while we efficiently filter the database")
	else:
		print("Please start over and enter the correct tax id.")
		sys.exit(1)
		
except ValueError:
	print('You must supply one taxonomy id')
	sys.exit(1)
except IndexError:
	print('You must supply one taxonomy id')
	sys.exit(1)

#Establish variables for filtering
pubmedlist = open("gene2pubmed", 'r')
pubmedtmp = []

#filter for the tax id in the first column
#Load the gene and the pubmedID into a list
#Big O: O(n+1) ~ O(n) - The run time scales linearly with the number of lines based on the for loop. 
#If acts as one operation, split and append as part of that operation, they are constants.
for line in pubmedlist:
	if line.startswith(tax + "	"):
		line = line.strip().split('\t')
		pubmedtmp.append(line[1:])


if len(pubmedtmp) == 0:
	print("That Taxonomy ID was not found, try another.")
	sys.exit(1)
#Convert the list into a dict, with pubmedID as the key and all the genes as values
#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop, if/else acts as 1 operation on each line
pubmedID_dict = {}
for line in pubmedtmp:
	if line[1] in pubmedID_dict:
		pubmedID_dict[line[1]].append(int(line[0]))
	else:
		pubmedID_dict[line[1]] = [int(line[0])]
		
#removing all the pubmed key/value pairs if there is only one value (gene)
#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop, if/else acts as 1 operation on each line
keylist = list(pubmedID_dict.keys())
for i in keylist:
	if len(pubmedID_dict[i]) <2:
		del	pubmedID_dict[i]
			


#Establish empy list for central algorithm
pairlist = []

#Big O: O(n * (n*(n-1)/2) + n) ~ O(n * n^2 + n) ~ O(n^3)  This is the bottleneck in terms of speed
#The for loop scales linearly, creating unique pairs scales as a second order polynomial as it's
#A nested for loop, the append ooperation scales linearly, but is only operating on the output of the 
#unique pair algorithm so we are adding n to big O, which cancels out.

#for each value in each key/value dict group return a tuple where the first item is the "i'th" item in the value set 
#and the second item is the "i+1'th" item in the value set. This finds all the possible pairs of genes linked by articles
#Inspiration for this code can be found here: https://stackoverflow.com/questions/5360220/how-to-split-a-list-into-pairs-in-all-possible-ways
for kvpair in pubmedID_dict.items():
	pre = ([(kvpair[1][a], kvpair[1][b]) for a in range(len(kvpair[1])) for b in range(a+1, len(kvpair[1]))])
	pairlist.append([tuple(k) for k in pre])



#This converts the list of lists into a flat list of tuples
#Big O: O(n*n) ~ O(n^2) - Run time scales quadratically with n - evident by the double for loop
#This code came from the class slides on Comprehension and Generators, slide 3
flatlist = [no for row in pairlist for no in row]


#This makes a dict of tuples and counts of article links - it's good for quickly seeing which PPI have the most links
#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop, if/else acts as 1 operation on each line
tuple_dict = {}
for j in flatlist:
	if j in tuple_dict:
		tuple_dict[j] += 1
	else:
		tuple_dict[j] = 1	

#Protein-Protein Interaction dict of dict
PPIdict = {}
#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop, if/else acts as 1 operation on each line
#This adds and increments each gene to the PPI dict with a nested dict of genes beneath it
#Values (Scores are incremented if the item exists in the dict)
for a,b in flatlist:
	if a not in PPIdict:
		PPIdict[a] = {}
		PPIdict[a][b] = 1
	elif b not in PPIdict:
		PPIdict[b] = {}
		PPIdict[b][a] = 1

	elif b in PPIdict[a]:
		PPIdict[a][b] += 1
	elif a in PPIdict[b]:
		PPIdict[b][a] += 1
	else:
		PPIdict[a][b] = 1
		PPIdict[b][a] = 1


#sum of values within values of a nested dict
#Big O: O(n * n + 1 + 1) ~ O(n^2) - the double for loop is n*n and the get and max functions act as constants
def find_max_articles(PPIdict):
	most_articles = {}
	for prikey, seckey in PPIdict.items():
		for key, article_count in seckey.items():
			most_articles[key] = most_articles.get(key,0) + article_count
	highest_score = max(most_articles, key=most_articles.get)
	return highest_score, most_articles[highest_score]


#FILTRATION OF GENE
infile= open("gene_info", 'r')
pubmedtmp=[]
#filter for the tax id in the first column
#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop
for line in infile:
    if line.startswith(tax+"	"):
        line = line.strip().split('\t')
        pubmedtmp.append(line)

#Initialize
geneName=dict()
#Inserting GeneID and the matching GeneName
#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop
for i in range(len(pubmedtmp)):
    if pubmedtmp[i][1] in geneName:
        geneName[pubmedtmp[i][1]]+=pubmedtmp[i][2]
    if pubmedtmp[i][1] not in geneName:
        geneName[pubmedtmp[i][1]]=pubmedtmp[i][2]

#User input and creating the output file
NetworkFile=open('GeneNetwork.sif', 'w')
EdgeFile=open('GeneEdge.txt', 'w')
#USER INPUT:
print("That's perfect! The database have been filtered for taxID:",tax)
print("Further filtration needs to be done for Cytoscape to handle the network")
userInput=input(str("Choose by the following: \n 1.Show network with most nodes \n 2.Show network with highest score \n Number 1 or 2?:"))
while userInput!="1" and userInput!="2":
	userInput=input(str("Choose by the following: \n 1.Show network with most nodes \n 2.Show network with highest score \n Number 1 or 2:"))
if userInput=="1":
	#Big O: O(n*log(n))
	#Based on binary search and the halvings that occur as the search is refined there is a log*n relationship
	#for the halvings, however we perform this operation n time for given the dict length. 
	#Prints top 5 items in sorted dict by number of connections
	sorted_dict = dict(sorted(PPIdict.items(), key=lambda kv:len(kv[1]), reverse = True))
	mostNodes=list(sorted_dict.items())[0:5]
	Top5Filter=input(str("We filtered the top 5 networks for you. Do you want to see all of the networks or one from 1 to 5:"))
	while Top5Filter!="1" and Top5Filter!="2" and Top5Filter!="3" and Top5Filter!="4" and Top5Filter!="5" and Top5Filter!="all":
		Top5Filter=input(str("Please try again. Type all,1,2,3,4 or 5 depending of which network you will like to see:"))
	if Top5Filter=="all":
		#Initialize
		GeneID=list()
		ConnectedGenes=list()
		MatchingScore=list()
		#Appending genes, matching genes and confidence score into three seperates list
		#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop. Though we are appending though list which in this case is O(1)
		for i in range(len(mostNodes)):
			GeneID.append(mostNodes[i][0])
			ConnectedGenes+=list(mostNodes[i][1].keys())
			MatchingScore+=list(mostNodes[i][1].values())
		#Big O: O(n*n) ~ O(n^2) - A doubble for loop where run time scales quadratically with n.
		n=0
		#Outfile writen
		EdgeFile.write("Edge\tScore\n")
		#Making a double for loop for first looping through a gene and then other loop for looping through all matching genes.
		for i in range(len(GeneID)):
			for char in range(n,(len(mostNodes[i][1].keys())+n)):
				NetworkFile.write("{} (pp) {}\n".format(geneName[str(GeneID[i])],geneName[str(ConnectedGenes[char])]))
				EdgeFile.write("{} (pp) {}\t{}\n".format(geneName[str(GeneID[i])],geneName[str(ConnectedGenes[char])],MatchingScore[char]))
			n+=len(mostNodes[i][1].keys())

	else:
		#Initialize
		SpecifyMostNodes=mostNodes[int(Top5Filter)-1]
		ConnectedGenes=SpecifyMostNodes[1]
		keyList=list(ConnectedGenes.keys())
		valueList=list(ConnectedGenes.values())
		#THE GENE WITH MOST CONNECTION
		value=geneName[str(SpecifyMostNodes[0])]
		#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop.
		EdgeFile.write("Edge\tScore\n")
		#Making one for loop for having the chosen gene and looping through list with connected genes
		for i in range(len(keyList)):
			NetworkFile.write("{} (pp) {}\n".format(value,geneName[str(keyList[i])]))
			EdgeFile.write("{} (pp) {}\t{}\n".format(value,geneName[str(keyList[i])],valueList[i]))
			
elif userInput=="2":
	#Initialize
	list1=list()
	#CODE FOR FILTER
	top_gene = find_max_articles(PPIdict)[0]
	#Big O: O(n+1) ~ O(n)
	lst1 = [v for (k1, _), v in tuple_dict.items() if k1 == top_gene]
	#Big O: O(n+1) ~ O(n)
	lst2 = [v for (_, k2), v in tuple_dict.items() if k2 == top_gene]

	top_gene_dict = {}
	#Big O: O(n+1) ~ O(n)
	keys = [x for x, y in PPIdict.items() if top_gene in y]
	#Big O: O(n+1) ~ O(n)
	for k,v in PPIdict.items():
		if k in keys or k == top_gene:
			top_gene_dict[k] = [v]
			
	#Big O: O(n*log(n))
	#Based on binary search and the halvings that occur as the search is refined there is a log*n relationship
	#for the halvings, however we perform this operation n time for given the dict length.
	top_gene_sorted_dict = dict(sorted(top_gene_dict.items(), key=lambda kv:len(kv[1]), reverse = True))
	
	#Initialize
	keyList=list(top_gene_sorted_dict.keys())
	valueList=list(top_gene_sorted_dict.values())
	GeneID=list()
	GeneScore=list()
	#Big O: O(n+1) ~ O(n) - Run time scales linearly based on for loop.
	#Making new list with genes and their confidence score
	for i in range(len(valueList)):
		GeneID+=list((valueList[i][0].keys()))
		GeneScore+=list((valueList[i][0].values()))
	print("The top gene is:",geneName[str(top_gene)],"and is mentioned with other genes",sum(lst1)+sum(lst2),"times")
	userInput=input(str("Do you want to:\n 1.See five largest networks where the top gene has the highest confidence score\n 2.Only show the related genes to the top gene\nNumber 1 or 2:"))
	while userInput!="1" and userInput!="2":
		userInput=input(str("Please try again. Type 1 or 2. 1 all five networks and 2 for only connected genes to top gene:"))

	if userInput=="1":
		n=0
		#Big O: O(n*n) ~ O(n^2) - A doubble for loop where run time scales quadratically with n.
		EdgeFile.write("Edge\tScore\n")
		#Again doing a double for loop looping through list with genes and another list with all matching genes
		for i in range(len(valueList)):
			for char in range(n,(len(valueList[i][0].keys())+n)):
				NetworkFile.write("{} (pp) {}\n".format(geneName[str(keyList[i])],geneName[str(GeneID[char])]))
				EdgeFile.write("{} (pp) {}\t{}\n".format(geneName[str(keyList[i])],geneName[str(GeneID[char])],GeneScore[char]))
			n+=len(valueList[i][0].keys())
	else:
		n=0
		EdgeFile.write("Edge\tScore\n")
		#Big O: O(n*n) ~ O(n^2) - A doubble for loop where run time scales quadratically with n.
		#Doing a double for loop looping through list with genes and another list with all matching genes.
		#Different is that the outfile only writes if the top gene matches on gene in the lists
		for i in range(len(valueList)):
			for char in range(n,(len(valueList[i][0].keys())+n)):
				if keyList[i]==top_gene:
					NetworkFile.write("{} (pp) {}\n".format(geneName[str(keyList[i])],geneName[str(GeneID[char])]))
					EdgeFile.write("{} (pp) {}\t{}\n".format(geneName[str(keyList[i])],geneName[str(GeneID[char])],GeneScore[char]))
				elif GeneID[char]==top_gene:
					NetworkFile.write("{} (pp) {}\n".format(geneName[str(keyList[i])],geneName[str(GeneID[char])]))
					EdgeFile.write("{} (pp) {}\t{}\n".format(geneName[str(keyList[i])],geneName[str(GeneID[char])],GeneScore[char]))
			n+=len(valueList[i][0].keys())






