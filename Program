
#!/usr/bin/env python3

#Open gene 2 pubmed
#open geneinfo
#Ask for a tax id
	#check for error
	
#filter gene_info data for that tax id
#filter gene2pubmed for that tax id
#Save these two files as temporary filtering/selection files (Is this the efficient way)


#Genes are linked if mentioned in the same pubmed article -- one exercise
	#pubmed_article  gene_number  gene_name	description
	#output for a network is .sif gene pp gene
	#need additional output file for network description
#The weight of gene linkage is calculated by the number of times the two genes are mentioned together - another exercise
	#genename(pp)genename  confidence_score
	#output for a score is .txt
	
	
#The file for cytoscape needs to be further filtered.  
#present which genes have the most connections?  Select from that?
#maybe if a network has more than 50 genes get rid of the connections that are only mentioned once?

#######################################################################################################################

import sys

try:
	tax = str(sys.argv[1])
	print("The taxonomy id you have entered is: ", tax)
	response = input("Is that correct? Please enter y or n: ")
	if response.upper() == "Y":
		print("Please be patient while we efficiently filter the database")
	else:
		print("Please start over and enter the correct tax id.")
		sys.exit(1)
		
except ValueError:
	print('You must supply one taxonomy id')
	sys.exit(1)
except IndexError:
	print('You must supply one taxonomy id')
	sys.exit(1)

#filter
pubmedlist = open("gene2pubmed", 'r')
#filter for the tax id in the first column

#Load the gene and the pubmedID into a list
pubmedtmp = []

for line in pubmedlist:
	if line.startswith(tax + "	"):
		line = line.strip().split('\t')
		pubmedtmp.append(line[1:])

#Convert the list into a dict, with pubmedID as the key and all the genes as values
pubmedID_dict = {}
for line in pubmedtmp:
	if line[1] in pubmedID_dict:
		pubmedID_dict[line[1]].append(int(line[0]))
	else:
		pubmedID_dict[line[1]] = [int(line[0])]
		
#removing all the pubmed key/value pairs if there is only one value (gene)
keylist = list(pubmedID_dict.keys())
for i in keylist:
	if len(pubmedID_dict[i]) <2:
		del	pubmedID_dict[i]
			
#print(pubmedID_dict)

# This finds all the possible pairs of genes linked by articles
pairlist = []
tuple_dict = {}

for kvpair in pubmedID_dict.items():
	pre = ([sorted((kvpair[1][a], kvpair[1][b])) for a in range(len(kvpair[1])) for b in range(a+1, len(kvpair[1]))])
	pairlist.append([tuple(k) for k in pre])

#This converts the list of lists into a flat list of tuples
flatlist = [no for row in pairlist for no in row]


#NEEDED FOR COUNT
#This makes a dict of tuples and counts of article links - it's good for quickly seeing which PPI have the most links
for j in flatlist:
	if j in tuple_dict:
		tuple_dict[j] += 1
	else:
		tuple_dict[j] = 1	
print(tuple_dict)


#OPTION 2 - dict of dict
PPIdict = {}
for a,b in flatlist:
	if a not in PPIdict:
		PPIdict[a] = {}
		PPIdict[a][b] = 1
	elif b not in PPIdict:
		PPIdict[b] = {}
		PPIdict[b][a] = 1

	elif b in PPIdict[a]:
		PPIdict[a][b] += 1
	elif a in PPIdict[b]:
		PPIdict[b][a] += 1
	else:
		PPIdict[a][b] = 1
		PPIdict[b][a] = 1

print(PPIdict)

print('\n')
print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")

#Prints top 5 items in sorted dict by number of connections
sorted_dict = dict(sorted(PPIdict.items(), key=lambda kv:len(kv[1]), reverse = True))
print(list(sorted_dict.items())[0:5])

print('\n')
print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")

#sum of values within values of a nested dict
def find_max_articles(PPIdict):
	most_articles = {}
	for prikey, seckey in PPIdict.items():
		for key, article_count in seckey.items():
			most_articles[key] = most_articles.get(key,0) + article_count
	highest_score = max(most_articles, key=most_articles.get)
	return highest_score, most_articles[highest_score]
    
print (find_max_articles(PPIdict)[0])

top_gene = find_max_articles(PPIdict)[0]
#print(tuple_dict[top_gene])
lst1 = [v for (k1, _), v in tuple_dict.items() if k1 == top_gene]
lst2 = [v for (_, k2), v in tuple_dict.items() if k2 == top_gene]
print(sum(lst1)+sum(lst2))

#show most studied network pair - highest subdict value

############# MIKKEL TO BUILD USER FILTER INPUT ####################

############ MIKKEL TO TURN OUTPUT INTO CYTOSCAPE FILES #############


#FILTRATION OF GENE
infile= open("gene_info", 'r')
pubmedtmp=[]
#filter for the tax id in the first column
for line in infile:
    if line.startswith(tax):
        line = line.strip().split('\t')
        pubmedtmp.append(line)

n=0
for i in range(len(pubmedtmp)):
    if len(pubmedtmp[i][0])!=len(tax):
        pubmedtmp[i].clear()
        n+=1
geneName=dict()
for i in range(len(pubmedtmp)-n):
    if pubmedtmp[i][1] in geneName:
        geneName[pubmedtmp[i][1]]+=pubmedtmp[i][3]
    if pubmedtmp[i][1] not in geneName:
        geneName[pubmedtmp[i][1]]=pubmedtmp[i][3]

print(geneName)



#########################################################
Below these lines is extra code which may be useful
#########################################################
#########################################################


#sort by the pubmed id
def sort_key(row):
    return row[2]
pubmedtmp.sort(key = sort_key)



#inserting PubmeID into dict
pubmeID={}
for item in pubmedtmp:
	if item[2] not in pubmeID:
		pubmeID[item[2]] = {}
#print(pubmeID)

#temp code for testing equivalence in list of list
n = 0
for item in pubmedtmp[0:-1]:
	if pubmedtmp[n][2] == pubmedtmp[n+1][2]:
		print("true")
		n += 1
	else:
		n += 1
		continue

for k in pubdict.keys():

