#Hopefully get a dict which is sorted like (gene1, gene2): (pubmedID1, pubmedID2, pubmedID3).
#Things to look for afterwards:
  #Make some kind of table for cytoscape, consisting: pubmed_article  gene_number  gene_name	description?
	  #output for a network is .sif gene pp gene
  #The weight of the edge is the number of articles, which links both genes.
    #Looking for every key example (gene1, gene2) and look for the values for that key - how many there is.
      #From that we can make a file which consist of: genename(pp)genename  confidence_score
	      #output for a score is .txt
  #From that we can do some filtration of the file:
    #A network with many connected nodes = many genes.
    #Networks where the sum of the edges is high = many co-mentioning articles.
    #High edge-sum/nodes = high importance of the network, many articles.
    #Some nodes in the graph do not have any connecting edges = virgin territory or maybe uninteresting.
    #Networks that consists of only few nodes where the connecting edges have low weights = not much research has been made.
    #Networks that connect to a specific gene = an overview of a interaction network, maybe a biological process.
    #Networks that has a specific gene as a center and has connections to the n'th degree (star shaped).

#START PROGRAM:
try:
    tax = str(sys.argv[1])
    print("The taxonomy id you have entered is:", tax)
    response = input("Is that correct? Please enter y or n: ")
    while response.upper() != "Y":
        tax =input('Please enter your taxonomy again: ')
        print("The taxonomy id you have entered is: ", tax)
        response = input("Is that correct? Please enter y or n: ")        
    print("Please be patient while we efficiently filter the database")
        
except ValueError:
    tax=input('You must supply one taxonomy id')
    print("The taxonomy id you have entered is: ", tax)
    response = input("Is that correct? Please enter y or n: ")
    if response.upper() == "Y":
        print("Please be patient while we efficiently filter the database")
except IndexError:
    tax=input('You must supply one taxonomy id')
    response = input("Is that correct? Please enter y or n: ")
    if response.upper() == "Y":
        print("Please be patient while we efficiently filter the database")
print(tax)


#GETTING CONFIDENCE SCORE
def confidence_score(genes):
	number=0
	confidence_score=0
	#Making a list with all values
	ValueList = list(infile.values())
    #Making a list with all keys
    keyList=list(infile.keys()).split()
    #Looping through gene connection and conting pubmedID
    for i in range(len(ValueList)):
    	number=len(ValueList[i]):
    	#Calculating of confidenscore
    	confidence_score=
    	#Printing and reseting confidence score back to 0
    	print(keyList[i][0],"\t","pp","\t",keyList[i][0],"\t",confidence_score)
        confidence_score=0
mean(accNum)


#EXTRACTING GENE NAMES.
infile=open('gene_info','r')
for line in infile:
	
